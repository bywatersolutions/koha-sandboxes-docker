---
-
  hosts: all
  become: true

  handlers:
    -
      name: "Restart apache"
      service: "name=apache2 state=restarted"
    -
      name: "Enable apache webapp site"
      shell: a2ensite webapp
      notify:
        - "Restart apache"
    -
      name: "Install koha git config"
      copy:
        dest: /usr/local/src/koha/.git/config
        mode: 365
        owner: root
        src: files/git/config
        force: yes
      notify:
        - "Update koha git repo"
    -
      name: "Update koha git repo"
      shell: cd /usr/local/src/koha && yes | git fetch --all

  vars_files:
      - vars/defaults.yml
      - vars/user.yml

  roles:
    - geerlingguy.pip
    - geerlingguy.docker

  tasks:
    - name: Install "git" package
      apt:
        name: git

    - name: Install "pip 3" package
      apt:
        name: python3-pip
#        update_cache: yes

  tasks:
    - name: Find out playbook's parent directory path
      shell: dirname "$PWD"
      register: pwd_output
    - debug: 
      debug: var=pwd_output.stdout
 
    - name: Install "cpanminus" package
      apt:
        name: cpanminus

    - name: Install "default-libmysqlclient-dev" package, needed for pip package "mysqlclient"
      apt:
        name: default-libmysqlclient-dev

    - name: Install "mysql-client" package to allow cli access to db container
      apt:
        name: mysql-client

    - cpanm:
        name: Module::Install
    - cpanm:
        name: Mojolicious::Commands
    - cpanm:
        name: Mojolicious::Plugin::TemplateToolkit
    - cpanm:
        name: DateTime
    - cpanm:
        name: YAML
    - cpanm:
        name: Proc::Daemon
    - cpanm:
        name: Modern::Perl
    - cpanm:
        name: DateTime::Format::Strptime;

    - name: Install "apache2" package
      apt:
        name: apache2
    - name: Enable mod proxy for apache2
      apache2_module:
        state: present
        name: proxy
      notify:
        - "Restart apache"
    - name: Enable mod ssl for apache2
      apache2_module:
        state: present
        name: ssl
      notify:
        - "Restart apache"
    - name: Enable mod proxy_balancer for apache2
      apache2_module:
        state: present
        name: proxy_balancer
      notify:
        - "Restart apache"
    - name: Enable mod proxy_http for apache2
      apache2_module:
        state: present
        name: proxy_http
      notify:
        - "Restart apache"
    - name: Remove default apache file
      file:
        path: /etc/apache2/sites-enabled/000-default.conf
        state: absent
      notify:
        - "Restart apache"

    - name: Create directories to store sandbox files in
      file:
        path: /sandboxes/configs
        state: directory
        mode: 01777
    - name: Create directories to store sandbox files in
      file:
        path: /sandboxes/logs
        state: directory
        mode: 01777

    - name: "Clone koha source to /usr/local/src/koha"
      git:
        repo: https://git.koha-community.org/Koha-community/Koha.git
        dest: /usr/local/src/koha
        accept_hostkey: yes
      notify: 
        - "Install koha git config"

    - name: "Clone koha-testing-docker source to /usr/local/src/koha-testing-docker"
      git:
        repo: https://gitlab.com/koha-community/koha-testing-docker.git
        dest: /usr/local/src/koha-testing-docker
        accept_hostkey: yes

    - name: "Increase vm.max_map_count"
      shell: "sysctl -w vm.max_map_count=262144"
    - name: "Test if vm.max_map_count is set permanently"
      shell: cat /etc/sysctl.conf | grep vm.max_map_count | wc -l
      register: test_max_map_count
    - name: "Increase vm.max_map_count permanently"
      shell: echo "vm.max_map_count=262144" >> /etc/sysctl.conf
      when: test_max_map_count.stdout == "0"

    - name: "Install apache config for webapp"
      template:
        src: templates/webapp.conf.j2
        dest: /etc/apache2/sites-available/webapp.conf
      notify: "Enable apache webapp site"

    - name: "Pull the latest docker images for koha-testing-docker"
      shell: docker pull koha/koha-testing:master

    - pip:
        name: docker
        state: present

    - pip:
        name: mysqlclient
        state: present

    - name: Create docker network kohanet
      docker_network:
          name: kohanet

    - name: Ensure the MySQL database volume has been created
      docker_volume:
        name: db-data
        state: present

    - name: Copy mysql init directory to a known path
      copy:
        dest: /
        mode: 755
        owner: root
        src: files/docker-entrypoint-initdb.d
        force: yes

    - name: Copy mysql conf.d file to a known path
      copy:
        dest: /sandboxes.cnf
        mode: 444
        owner: root
        src: files/sandboxes.cnf
        force: yes

    - name: Ensure database Docker container is running
      docker_container:
        name: db
        state: present
        image: mariadb:10.3
        pull: yes
        restart: yes
        restart_policy: always
        state: started
        env:
            MYSQL_ROOT_PASSWORD: "{{ DB_ROOT_PASSWORD }}"
            MYSQL_ROOT_HOST: "172.%.%.%"
        volumes:
          - 'db-data:/var/lib/mysql'
          - '/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d'
          - '/sandboxes.cnf:/etc/mysql/conf.d/sandboxes.cnf'
        published_ports: 3306:3306
        command: '--max_allowed_packet=501M'
        networks:
          - name: kohanet

    - name: Ensure Elastic Docker container is running
      docker_container:
        name: es
        state: present
        image: koha/elasticsearch-icu
        pull: yes
        restart: yes
        restart_policy: always
        state: started
        env:
            cluster.name: "docker-cluster"
            bootstrap.memory_lock: "true"
            xpack.security.enabled: "false"
            ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        ulimits:
            memlock:-1:-1
        networks:
          - name: kohanet

    - name: Ensure Memcache Docker container is running
      docker_container:
        name: memcached
        state: present
        image: memcached
        pull: yes
        restart: yes
        restart_policy: always
        state: started
        networks:
          - name: kohanet

    - name: Install koha-restore-db script
      copy:
        dest: /usr/local/bin/koha-restore-db
        mode: 555
        owner: root
        src: files/koha-restore-db
        force: yes
      notify:
        - "Update koha git repo"

    - name: Symlink db loader script to /usr/local/bin
      copy:
        src: files/sb-load-db
        dest: /usr/local/bin/sb-load-db
        mode: 755
        owner: root

    - name: Start sandbox manager
      shell: "bash -l -c 'hypnotoad {{pwd_output.stdout}}/sandbox_manager/script/sandbox_manager'"

    - cron:
        name: "Start sandbox manager" #We don't need to this now, hypnotoad should handle better
        minute: "30"
        job: "bash -l -c 'hypnotoad {{pwd_output.stdout}}/sandbox_manager/script/sandbox_manager'"
        state: absent
    - cron:
        name: "Start sandbox daemon"
        minute: "*"
        job: "{{pwd_output.stdout}}/sandbox_manager/daemon.pl --start -d > /dev/null 2>&1"
    - cron:
        name: "Re-provision server nightly"
        minute: "0"
        hour: "0"
        job: "cd {{pwd_output.stdout}} && {{pwd_output.stdout}}/setup-sandbox-server.sh && bash -l -c 'hypnotoad {{pwd_output.stdout}}/sandbox_manager/script/sandbox_manager' > /dev/null 2>&1"
